#define PByte *(unsigned char*)
#define PInt *(unsigned short*)
#define PIntS *(short*)
#define PLong *(unsigned long*)
#define PLongS *(long*)
#define PLLong *(long long*)
//DWORD WINAPI VerificaSkills();
#define vNick(clientid) (char*)(clientid * 0x0410 + 0x015C69B8)
#define YELLOW		FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_INTENSITY
#define LBLUE		FOREGROUND_BLUE | FOREGROUND_INTENSITY
#define LRED		FOREGROUND_RED | FOREGROUND_INTENSITY
#define LGREEN		FOREGROUND_GREEN | FOREGROUND_INTENSITY
#define LMAGENTA	FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_INTENSITY
#define WHITE		FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY
#define LCYAN		FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY
#define GREY		0 | FOREGROUND_INTENSITY
#define CAPA_ADDR 0x015C6A8C
#define LEVEL_ADDR 0x15C69DC
#define EXP_ADDR 0x15C69D4
#define GOLD_ADDR 0x15C69D0
#define DAMAGE_ADDR 0x15C69E0
#define DEFENSE_ADDR 0x15C69DE
#define STR_ADDR 0x15C69EC
#define INT_ADDR 0x15C69EE
#define DES_ADDR 0x15C69F0
#define CON_ADDR 0x15C69F2
#define PSTATS_ADDR 0x15C6C98
#define PLEARN_ADDR 0x15C6C9A
#define PSKILL_ADDR 0x15C6C9C
#define FACE_ADDR 0x15C6A14
#define FACE2_ADDR 0x15C6E29
#define RESET_ADDR 0x15C6E28
#define RACE_ADDR 0x15C69C8
#define MERCHANT_ADDR 0x15C69C9
#define CLASS_ADDR 0x15C69CC
#define GEMAX_ADDR 0x15C69D8
#define GEMAY_ADDR 0x15C69DA
#define ARMAD_ADDR 0x15C6A44
#define ARMAE_ADDR 0x15C6A4C
#define REFARMAD_ADDR 0x15C6A47
#define REFARMAE_ADDR 0x15C6A4F
#define vQMob(ID) (PInt(ID * 0x0BAC + 0xA169BC))
#define vName(cID) (cID * 0x0410 + 0x015C69B8)
#define EF_MAGIC 60
#define Client vContador(120)
#define vContador(Quest) (*(BYTE*)(0x0487FD4+(Quest)))
#define vChar1(ClientID) (char*)(ClientID * 0xC4C + 0x7B31FF4)
#define vChar2(ClientID) (char*)(ClientID * 0xC4C + 0x7B31FF4 + 16)
#define vChar3(ClientID) (char*)(ClientID * 0xC4C + 0x7B31FF4 + 32)
#define vChar4(ClientID) (char*)(ClientID * 0xC4C + 0x7B31FF4 + 48)


#define StatusPlayer(clientid) *(unsigned short*)(0x7B318E0 + clientid * 0xC4C)
#define WhisperStatus(clientid) *(unsigned short*)(clientid * 0xC4C + 0x07B32314)
#define StatusPK(clientid) *(unsigned short*)(clientid * 0x0C4C + 0x07B3233C) // PK on ou não
#define cX(clientid) *(unsigned short*)(clientid * 0x0410 + 0x015C6CEC)  //  Posição X user
#define cY(clientid) *(unsigned short*)(clientid * 0x0410 + 0x015C6CF0)  //  Posição Y do user
#define CargoCoin(clientid) *(unsigned long*)((clientid  * 0xC4C) + 0x07B31E9C)
#define vLogin(cID) (cID * 0x0C4C + 0x7B318C8) // Retorna a conta do usuário
#define ZeroSlot(slot) memset(&player->Inventory[slot], 0, 8)

#define _equip 0
#define _inv 1

typedef st_Mob_754* (CALLBACK* dllCalc)(int);
extern dllCalc fpCalc;

#define SERVER_SIDE 0
#define CLIENT_SIDE 1
#define PLAYER 100

static BYTE keys[] = {
	0x84, 0x87, 0x37, 0xd7, 0xea, 0x79, 0x91, 0x7d, 0x4b, 0x4b, 0x85, 0x7d, 0x87, 0x81, 0x91, 0x7c, 0x0f, 0x73, 0x91, 0x91, 0x87, 0x7d, 0x0d, 0x7d, 0x86, 0x8f, 0x73, 0x0f, 0xe1, 0xdd, 0x85, 0x7d,
	0x05, 0x7d, 0x85, 0x83, 0x87, 0x9c, 0x85, 0x33, 0x0d, 0xe2, 0x87, 0x19, 0x0f, 0x79, 0x85, 0x86, 0x37, 0x7d, 0xd7, 0xdd, 0xe9, 0x7d, 0xd7, 0x7d, 0x85, 0x79, 0x05, 0x7d, 0x0f, 0xe1, 0x87, 0x7e,
	0x23, 0x87, 0xf5, 0x79, 0x5f, 0xe3, 0x4b, 0x83, 0xa3, 0xa2, 0xae, 0x0e, 0x14, 0x7d, 0xde, 0x7e, 0x85, 0x7a, 0x85, 0xaf, 0xcd, 0x7d, 0x87, 0xa5, 0x87, 0x7d, 0xe1, 0x7d, 0x88, 0x7d, 0x15, 0x91,
	0x23, 0x7d, 0x87, 0x7c, 0x0d, 0x7a, 0x85, 0x87, 0x17, 0x7c, 0x85, 0x7d, 0xac, 0x80, 0xbb, 0x79, 0x84, 0x9b, 0x5b, 0xa5, 0xd7, 0x8f, 0x05, 0x0f, 0x85, 0x7e, 0x85, 0x80, 0x85, 0x98, 0xf5, 0x9d,
	0xa3, 0x1a, 0x0d, 0x19, 0x87, 0x7c, 0x85, 0x7d, 0x84, 0x7d, 0x85, 0x7e, 0xe7, 0x97, 0x0d, 0x0f, 0x85, 0x7b, 0xea, 0x7d, 0xad, 0x80, 0xad, 0x7d, 0xb7, 0xaf, 0x0d, 0x7d, 0xe9, 0x3d, 0x85, 0x7d,
	0x87, 0xb7, 0x23, 0x7d, 0xe7, 0xb7, 0xa3, 0x0c, 0x87, 0x7e, 0x85, 0xa5, 0x7d, 0x76, 0x35, 0xb9, 0x0d, 0x6f, 0x23, 0x7d, 0x87, 0x9b, 0x85, 0x0c, 0xe1, 0xa1, 0x0d, 0x7f, 0x87, 0x7d, 0x84, 0x7a,
	0x84, 0x7b, 0xe1, 0x86, 0xe8, 0x6f, 0xd1, 0x79, 0x85, 0x19, 0x53, 0x95, 0xc3, 0x47, 0x19, 0x7d, 0xe7, 0x0c, 0x37, 0x7c, 0x23, 0x7d, 0x85, 0x7d, 0x4b, 0x79, 0x21, 0xa5, 0x87, 0x7d, 0x19, 0x7d,
	0x0d, 0x7d, 0x15, 0x91, 0x23, 0x7d, 0x87, 0x7c, 0x85, 0x7a, 0x85, 0xaf, 0xcd, 0x7d, 0x87, 0x7d, 0xe9, 0x3d, 0x85, 0x7d, 0x15, 0x79, 0x85, 0x7d, 0xc1, 0x7b, 0xea, 0x7d, 0xb7, 0x7d, 0x85, 0x7d,
	0x85, 0x7d, 0x0d, 0x7d, 0xe9, 0x73, 0x85, 0x79, 0x05, 0x7d, 0xd7, 0x7d, 0x85, 0xe1, 0xb9, 0xe1, 0x0f, 0x65, 0x85, 0x86, 0x2d, 0x7d, 0xd7, 0xdd, 0xa3, 0x8e, 0xe6, 0x7d, 0xde, 0x7e, 0xae, 0x0e,
	0x0f, 0xe1, 0x89, 0x7e, 0x23, 0x7d, 0xf5, 0x79, 0x23, 0xe1, 0x4b, 0x83, 0x0c, 0x0f, 0x85, 0x7b, 0x85, 0x7e, 0x8f, 0x80, 0x85, 0x98, 0xf5, 0x7a, 0x85, 0x1a, 0x0d, 0xe1, 0x0f, 0x7c, 0x89, 0x0c,
	0x85, 0x0b, 0x23, 0x69, 0x87, 0x7b, 0x23, 0x0c, 0x1f, 0xb7, 0x21, 0x7a, 0x88, 0x7e, 0x8f, 0xa5, 0x7d, 0x80, 0xb7, 0xb9, 0x18, 0xbf, 0x4b, 0x19, 0x85, 0xa5, 0x91, 0x80, 0x87, 0x81, 0x87, 0x7c,
	0x0f, 0x73, 0x91, 0x91, 0x84, 0x87, 0x37, 0xd7, 0x86, 0x79, 0xe1, 0xdd, 0x85, 0x7a, 0x73, 0x9b, 0x05, 0x7d, 0x0d, 0x83, 0x87, 0x9c, 0x85, 0x33, 0x87, 0x7d, 0x85, 0x0f, 0x87, 0x7d, 0x0d, 0x7d,
	0xf6, 0x7e, 0x87, 0x7d, 0x88, 0x19, 0x89, 0xf5, 0xd1, 0xdd, 0x85, 0x7d, 0x8b, 0xc3, 0xea, 0x7a, 0xd7, 0xb0, 0x0d, 0x7d, 0x87, 0xa5, 0x87, 0x7c, 0x73, 0x7e, 0x7d, 0x86, 0x87, 0x23, 0x85, 0x10,
	0xd7, 0xdf, 0xed, 0xa5, 0xe1, 0x7a, 0x85, 0x23, 0xea, 0x7e, 0x85, 0x98, 0xad, 0x79, 0x86, 0x7d, 0x85, 0x7d, 0xd7, 0x7d, 0xe1, 0x7a, 0xf5, 0x7d, 0x85, 0xb0, 0x2b, 0x37, 0xe1, 0x7a, 0x87, 0x79,
	0x84, 0x7d, 0x73, 0x73, 0x87, 0x7d, 0x23, 0x7d, 0xe9, 0x7d, 0x85, 0x7e, 0x02, 0x7d, 0xdd, 0x2d, 0x87, 0x79, 0xe7, 0x79, 0xad, 0x7c, 0x23, 0xda, 0x87, 0x0d, 0x0d, 0x7b, 0xe7, 0x79, 0x9b, 0x7d,
	0xd7, 0x8f, 0x05, 0x7d, 0x0d, 0x34, 0x8f, 0x7d, 0xad, 0x87, 0xe9, 0x7c, 0x85, 0x80, 0x85, 0x79, 0x8a, 0xc3, 0xe7, 0xa5, 0xe8, 0x6b, 0x0d, 0x74, 0x10, 0x73, 0x33, 0x17, 0x0d, 0x37, 0x21, 0x19
};



#define addrSlotI(ClientID,Slot) (ClientID * 0x0410 + Slot * 8 + 0x015C6A94)
#define SendInv2 ((void(*)(int,int,int,int))0x4015C3)
static int kefr = 0;
static int decidedrop;
static int LiderPergaA1;
static int LiderPergaA2;
static int LiderPergaA3;
static int LiderPergaA4;
static int LiderPergaA5;
static int LiderPergaA6;
static int LiderPergaA7;
static int LiderPergaA8;
static int LiderPergaANeses;
static int LiderCarta;
static int KefraDead;

static char BufferTab[25*1000];

static int val1, val2, val3, val4, forc, inte;

static int ExtremeDiamante[94] = {2451, 2455, 2459, 2463, 2467, 2471, 2475, 2479, 2483, 2487, 2491, 2511, 2515, 2519, 2523, 2527, 2531, 2535, 2539, 2543, 2547, 2551,
  2571, 2575, 2579, 2583, 2587, 2591, 2595, 2599, 2603, 2607, 2611, 2631, 2635, 2639, 2643, 2647, 2651, 2655, 2659, 2663, 2667, 2671, 2691, 2695, 2699, 2703,
  2707, 2711, 2715, 2719, 2723, 2727, 2731, 2751, 2755, 2759, 2763, 2767, 2771, 2775, 2779, 2783, 2787, 2791, 2811, 2815, 2819, 2823, 2827, 2831, 2835, 2839, 2843,
  2847, 2851, 2855, 2859, 2863, 2871, 2875, 2879, 2883, 2887, 2891, 2895, 2911, 2915, 2919, 2923, 2927, 2931, 2935};
static int  ExtremeEsmeralda[94] = {2452, 2456, 2460, 2464, 2468, 2472, 2476, 2480, 2484, 2488, 2492, 2512, 2516, 2520, 2524, 2528, 2532, 2536, 2540, 2544, 2548, 2552,
  2572, 2576, 2580, 2584, 2588, 2592, 2596, 2600, 2604, 2608, 2612, 2632, 2636, 2640, 2644, 2648, 2652, 2656, 2660, 2664, 2668, 2672, 2692, 2696, 2700, 2704,
  2708, 2712, 2716, 2720, 2724, 2728, 2732, 2752, 2756, 2760, 2764, 2768, 2772, 2776, 2780, 2784, 2788, 2792, 2812, 2816, 2820, 2824, 2828, 2832, 2836, 2840, 2844,
  2848, 2852, 2856, 2860, 2864, 2872, 2876, 2880, 2884, 2888, 2892, 2896, 2912, 2916, 2920, 2924, 2928, 2932, 2936};
static int ExtremeCoral[94] =  { 2453, 2457, 2461, 2465, 2469, 2473, 2477, 2481, 2485, 2489, 2493, 2513, 2517, 2521, 2525, 2529, 2533, 2537, 2541, 2545, 2549, 2553,
  2573, 2577, 2581, 2585, 2589, 2593, 2597, 2601, 2605, 2609, 2613, 2633, 2637, 2641, 2645, 2649, 2653, 2657, 2661, 2665, 2669, 2673, 2693, 2697, 2701, 2705,
  2709, 2713, 2717, 2721, 2725, 2729, 2733, 2753, 2757, 2761, 2765, 2769, 2773, 2777, 2781, 2785, 2789, 2793, 2813, 2817, 2821, 2825, 2829, 2833, 2837, 2841, 2845,
  2849, 2853, 2857, 2861, 2865, 2873, 2877, 2881, 2885, 2889, 2893, 2897, 2913, 2917, 2921, 2925, 2929, 2933, 2937};
static int ExtremeGarnet[94] = {2454, 2458, 2462, 2466, 2470, 2474, 2478, 2482, 2486, 2490, 2494, 2514, 2518, 2522, 2526, 2530, 2534, 2538, 2542, 2546, 2550, 2554,
  2574, 2578, 2582, 2586, 2590, 2594, 2598, 2602, 2606, 2610, 2614, 2634, 2638, 2642, 2646, 2650, 2654, 2658, 2662, 2666, 2670, 2674, 2694, 2698, 2702, 2706,
  2710, 2714, 2718, 2722, 2726, 2730, 2734, 2754, 2758, 2762, 2766, 2770, 2774, 2778, 2782, 2786, 2790, 2794, 2814, 2818, 2822, 2826, 2830, 2834, 2838, 2842, 2846,
  2850, 2854, 2858, 2862, 2866, 2874, 2878, 2882, 2886, 2890, 2894, 2898, 2914, 2918, 2922, 2926, 29330, 2934, 2938};

